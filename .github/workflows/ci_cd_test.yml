name: Release and Update Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - "my-app/1-deployment.yml"

jobs:
  release_and_update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.WORKFLOW_GIT_ACCESS_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Determine New Version
        id: determine_version
        run: |
          # Get the latest version tag from the repository
          # latest_version=$(git describe --abbrev=0 --tags)
          # latest_version=$(grep '${{ secrets.DOCKER_HUB_USERNAME }}/nginx:' my-app/1-deployment.yml)
          latest_version=$(grep '***/nginx:' my-app/1-deployment.yml | grep -oP '\d+\.\d+\.\d+')

          # echo "Lates version: $latest_version"

          # Extract the numeric part of the version
          version_number=$latest_version
          last_digit=$(echo $version_number | grep -oP '\d+$')

          echo "Lates version: $version_number"

          # Increment the version number by one
          # new_version=$(($version_number + 1))
          new_version=$(($last_digit + 1))

          # Combine the first part of the version and the incremented last digit
          new_version_full=$(echo $version_number | sed "s/\([0-9]\+\)$/$new_version/")

          # Set the new version as an output for later use
          echo "New version: $new_version_full"
          echo "::set-output name=new_version::$new_version_full"

      - name: Pull Base Image
        # run: docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/nginx:latest
        run: docker pull nginx:latest

      - name: Release Docker Image
        run: |
          new_ver=${{ steps.determine_version.outputs.new_version }}

          echo "new version: $new_ver"

          # Simulate release of the new docker images
          docker tag nginx:latest ${{ secrets.DOCKER_HUB_USERNAME }}/nginx:$new_ver

          # Push new version to dockerhub
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/nginx:$new_ver

      - name: Update Kubernetes Deployment
        run: |
          new_ver=${{ steps.determine_version.outputs.new_version }}

          # Create temporary folder
          tmp_dir=$(mktemp -d)
          echo $tmp_dir

          # Clone GitHub repo
          git clone https://github.com/codycodestacker/gitOpsTest_p.git $tmp_dir

          # Update image tag
          sed -i -e "s/${{ secrets.DOCKER_HUB_USERNAME }}\/nginx:.*/${{ secrets.DOCKER_HUB_USERNAME }}\/nginx:$new_ver/g" $tmp_dir/my-app/1-deployment.yml

          # Use the secret as an environment variable
          # export GIT_CREDENTIALS="${{ secrets.GH_TOKEN }}"

          # Commit and push
          cd $tmp_dir
          git config --global user.name "${{ secrets.CI_USERNAME }}"
          git config --global user.email "${{ secrets.CI_EMAIL_NUMB }}+${{ secrets.CI_USERNAME }}@users.noreply.github.com"
          # Set up the remote URL with the GitHub token
          git remote set-url origin "https://${{ secrets.WORKFLOW_GIT_ACCESS_TOKEN }}@github.com/codycodestacker/gitOpsTest_p.git"
          git add .
          git commit -m "Update image to $new_ver"
          git push

          # Optionally on build agents - remove folder
          rm -rf $tmp_dir
